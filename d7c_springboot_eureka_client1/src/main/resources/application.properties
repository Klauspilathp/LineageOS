# org.springframework.boot.context.dev.ConfigFileApplicationListener.addPropertySources
# 配置文件名，默认是 application.properties
spring.config.name=application
spring.profiles.active=dev

spring.application.name=d7c-springboot-client1
server.port=8092
server.tomcat.uri-encoding=UTF-8

# eureka-client1 客户端
# INSERT INTO `oauth2`.`oauth_client_details` (`client_id`, `resource_ids`, `client_secret`, `scope`, `authorized_grant_types`, 
# `web_server_redirect_uri`, `authorities`, `access_token_validity`, `refresh_token_validity`, `additional_information`, 
# `autoapprove`, `create_time`) VALUES ('eureka-client1', 'd7c-springboot-client-api', 
# '$2a$10$rJGklBeto2hvmhdWnHp85etyZPpWRTOSIK/aNWfmXVsKNcbX.Dsfq', 'read,write', 
# 'client_credentials,implicit,authorization_code,refresh_token,password', 'http://127.0.0.1:8092/login/callback', 
# NULL, NULL, NULL, NULL, 'false', '2020-07-26 11:19:03');
d7c-eureka-client1.code-resource-details.client-id=eureka-client1
d7c-eureka-client1.code-resource-details.client-secret=000000
d7c-eureka-client1.code-resource-details.access-token-uri=http://127.0.0.1:9101/oauth/token
d7c-eureka-client1.code-resource-details.user-authorization-uri=http://127.0.0.1:9101/oauth/authorize
d7c-eureka-client1.code-resource-details.client-authentication-scheme=form
d7c-eureka-client1.resource-server.user-info-uri=http://127.0.0.1:8091/common/user_info

# github 客户端
# https://github.com/settings/applications/new
github.code-resource-details.client-id=ecd6d721d292aabf3437
github.code-resource-details.client-secret=2dbc96d54ace48fc12550fd921b0857ee344d280
github.code-resource-details.access-token-uri=https://github.com/login/oauth/access_token
github.code-resource-details.user-authorization-uri=https://github.com/login/oauth/authorize
github.code-resource-details.client-authentication-scheme=form
github.resource-server.user-info-uri=https://api.github.com/user


# Channel Message
# https://www.jianshu.com/p/5641c31da548?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation
####### common config
# Multiple Binders
spring.cloud.stream.defaultBinder=rabbit
# spring.cloud.stream.binders.type=rabbit
# rabbit 连接配置
spring.cloud.stream.binders.environment.spring.rabbitmq.host=localhost
spring.cloud.stream.binders.environment.spring.rabbitmq.port=5672
spring.cloud.stream.binders.environment.spring.rabbitmq.username=guest
spring.cloud.stream.binders.environment.spring.rabbitmq.password=guest
####### consumer config
spring.cloud.stream.bindings.inputOrder.content-type=application/json
# 指定消息组和目标队列（消息交换机），要和生产者保持一致
spring.cloud.stream.bindings.inputOrder.group=orderGroup
spring.cloud.stream.bindings.inputOrder.destination=orderQueue
# 消息在队列中的最大存活时间，默认无限。当消息滞留时间超过 ttl，会被当作消费失败的消息，即会被转发到死信队列或丢弃。
spring.cloud.stream.rabbit.bindings.inputOrder.consumer.ttl=20000
# true 自动将死信队列绑定到 DLX，默认是 false。
spring.cloud.stream.rabbit.bindings.inputOrder.consumer.autoBindDlq=true
# 用诊断头将失败重新发布到 DLQ。
spring.cloud.stream.rabbit.bindings.inputOrder.consumer.republishToDlq=true

####### order log
# producer config
spring.cloud.stream.bindings.outputOrderLog.content-type=application/json
spring.cloud.stream.bindings.outputOrderLog.group=orderLogGroup
spring.cloud.stream.bindings.outputOrderLog.destination=orderLogQueue
# consumer config
spring.cloud.stream.bindings.inputOrderLog.content-type=application/json
spring.cloud.stream.bindings.inputOrderLog.group=orderLogGroup
spring.cloud.stream.bindings.inputOrderLog.destination=orderLogQueue
