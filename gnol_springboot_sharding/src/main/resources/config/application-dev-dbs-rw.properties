# 读写分离
sharding.jdbc.datasource.names=db0,db1
# 开启 sql 显示
sharding.jdbc.datasource.config.props.sql.show=true

# 数据源配置
sharding.jdbc.datasource.db0.type=com.alibaba.druid.pool.DruidDataSource
sharding.jdbc.datasource.db0.url=jdbc:mysql://127.0.0.1:3306/test_0?useUnicode=true&characterEncoding=UTF-8&characterSetResults=UTF-8&zeroDateTimeBehavior=convertToNull&serverTimezone=GMT%2B8&useSSL=false&allowMultiQueries=true
sharding.jdbc.datasource.db0.username=root
sharding.jdbc.datasource.db0.password=000000
sharding.jdbc.datasource.db0.driver-class-name=com.mysql.cj.jdbc.Driver
# 数据源连接参数
# javax.sql.DataSource 的属性在 io.shardingsphere.shardingjdbc.util.DataSourceUtil.getDataSource(String, Map<String, Object>) 方法中通过反射设置
sharding.jdbc.datasource.db0.initialSize=5
sharding.jdbc.datasource.db0.maxActive=20
sharding.jdbc.datasource.db0.minIdle=5
sharding.jdbc.datasource.db0.maxWait=30000
# 从连接池中取出连接前是否进行检测连接是否可用，检测失败是否从连接池中去除并尝试重取一个
sharding.jdbc.datasource.db0.testOnBorrow=false
sharding.jdbc.datasource.db0.testOnReturn=false
# 间隔 1 分钟检查一次需要关闭的空闲连接，单位毫秒
sharding.jdbc.datasource.db0.timeBetweenEvictionRunsMillis=60000
# 一个连接在连接池中最大空闲时间，单位毫秒
sharding.jdbc.datasource.db0.maxEvictableIdleTimeMillis=1800000
sharding.jdbc.datasource.db0.minEvictableIdleTimeMillis=1200000
# 是否自动回收泄漏的连接和超时时间，单位秒（30 分钟）
sharding.jdbc.datasource.db0.removeAbandoned=true
sharding.jdbc.datasource.db0.removeAbandonedTimeoutMillis=1800
sharding.jdbc.datasource.db0.validationQuery=SELECT 'x'

# 数据源配置
sharding.jdbc.datasource.db1.type=com.alibaba.druid.pool.DruidDataSource
sharding.jdbc.datasource.db1.url=jdbc:mysql://127.0.0.1:3306/test_1?useUnicode=true&characterEncoding=UTF-8&characterSetResults=UTF-8&zeroDateTimeBehavior=convertToNull&serverTimezone=GMT%2B8&useSSL=false&allowMultiQueries=true
sharding.jdbc.datasource.db1.username=root
sharding.jdbc.datasource.db1.password=000000
sharding.jdbc.datasource.db1.driver-class-name=com.mysql.cj.jdbc.Driver
# 数据源连接参数
# javax.sql.DataSource 的属性在 io.shardingsphere.shardingjdbc.util.DataSourceUtil.getDataSource(String, Map<String, Object>) 方法中通过反射设置
sharding.jdbc.datasource.db1.initialSize=5
sharding.jdbc.datasource.db1.maxActive=20
sharding.jdbc.datasource.db1.minIdle=5
sharding.jdbc.datasource.db1.maxWait=30000
# 从连接池中取出连接前是否进行检测连接是否可用，检测失败是否从连接池中去除并尝试重取一个
sharding.jdbc.datasource.db1.testOnBorrow=false
sharding.jdbc.datasource.db1.testOnReturn=false
# 间隔 1 分钟检查一次需要关闭的空闲连接，单位毫秒
sharding.jdbc.datasource.db1.timeBetweenEvictionRunsMillis=60000
# 一个连接在连接池中最大空闲时间，单位毫秒
sharding.jdbc.datasource.db1.maxEvictableIdleTimeMillis=1800000
sharding.jdbc.datasource.db1.minEvictableIdleTimeMillis=1200000
# 是否自动回收泄漏的连接和超时时间，单位秒（30 分钟）
sharding.jdbc.datasource.db1.removeAbandoned=true
sharding.jdbc.datasource.db1.removeAbandonedTimeoutMillis=1800
sharding.jdbc.datasource.db1.validationQuery=SELECT 'x'

# sharding_user
sharding.jdbc.config.masterslave.load-balance-algorithm-type=RANDOM
sharding.jdbc.config.masterslave.name=db0
sharding.jdbc.config.masterslave.master-data-source-name=db0
sharding.jdbc.config.masterslave.slave-data-source-names=db1
