<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.gnol</groupId>
		<artifactId>gnol_springboot_plugins</artifactId>
		<version>0.0.1-SNAPSHOT</version>
		<relativePath />
	</parent>
	<artifactId>gnol_springboot</artifactId>
	<packaging>pom</packaging>
	<url>https://start.spring.io/,https://github.com/spring-projects/spring-boot,http://c.biancheng.net/spring_cloud/</url>
	<name>gnol_springboot</name>
	<description>gnol springboot 版项目父工程</description>
  
  	<!-- 设定主仓库，按设定顺序进行查找。 -->
	<repositories>
		<repository>
			<id>alimaven</id>
			<name>aliyun maven</name>
			<url>http://maven.aliyun.com/nexus/content/groups/public</url>
		</repository>
	</repositories>
    <!-- 设定插件仓库 -->
	<pluginRepositories>
		<pluginRepository>
			<id>alimaven</id>
			<name>aliyun maven</name>
			<url>http://maven.aliyun.com/nexus/content/groups/public</url>
		</pluginRepository>
	</pluginRepositories>

	<modules>
		<module>gnol_springboot_common</module>
		<module>gnol_springboot_common_services</module>
		<module>gnol_springboot_eureka_server</module>
		<module>gnol_springboot_zuul</module>
		<module>gnol_springboot_gateway</module>
		<module>gnol_springboot_config</module>
		<module>gnol_springboot_auth_feign</module>
		<module>gnol_springboot_auth</module>
		<module>gnol_springboot_admin</module>
		<module>gnol_springboot_client_web</module>
		<module>gnol_springboot_client_api</module>
		<module>gnol_springboot_eureka_client1</module>
		<module>gnol_springboot_eureka_client2</module>
		<module>gnol_springboot_dashboard</module>
		<module>gnol_springboot_webflux</module>
		<module>gnol_springboot_client_websocket</module>
		<module>gnol_springboot_client_rpc</module>
		<module>gnol_springboot_quartz</module>
	</modules>
	
	<!-- 集中定义依赖版本号 -->
	<properties>
        <!-- 表示项目构建开始时间 -->
		<timestamp>${maven.build.timestamp}</timestamp>
        <!-- 表示属性 ${maven.build.timestamp} 的展示格式，默认值为 yyyyMMdd-HHmm -->
		<maven.build.timestamp.format>yyyyMMdd-HHmmss</maven.build.timestamp.format>
        <!-- 解决 Description	Resource Path Location Type Unknown	pom.xml	/gnol_springboot_common	line 1	Maven Configuration Problem -->
		<maven-jar-plugin.version>3.1.1</maven-jar-plugin.version>
        <!-- jar 版本管理 -->
		<gnol_springboot_plugins.version>0.0.1-SNAPSHOT</gnol_springboot_plugins.version>
		<swagger.version>2.9.2</swagger.version>
		<spring-boot-admin.version>2.1.6</spring-boot-admin.version>
		<spring-boot-zuul.version>2.1.5.RELEASE</spring-boot-zuul.version>
		<ehcache.version>2.10.4</ehcache.version>
	</properties>

    <!-- 只是对版本进行管理，不会实际引入 jar -->
    <!-- compile：默认的 scope，表示 dependency 可以在生命周期中使用。而且这些 dependencies 会传递到依赖的项目中，适用于所有阶段，会随着项目一起发布 -->
    <!-- provided：跟 compile 相似，但是表明了dependency 由JDK或者容器提供，这个 scope 只能作用在编译和测试时，同时没有传递性 -->
    <!-- runtime：表示 dependency 不作用在编译时，但会作用在运行和测试时，如JDBC驱动，适用运行和测试阶段 -->
    <!-- test：表示 dependency 作用在测试时，不作用在运行时，只在测试时使用，用于编译和运行测试代码，不会随项目发布 -->
    <!-- system：跟 provided 相似，但是在系统中要以外部JAR包的形式提供，maven 不会在 repository 查找它 -->
	<dependencyManagement>
		<dependencies>
            <!-- gnol springboot 版插件工程 =======>start -->
			<dependency>
				<groupId>com.gnol</groupId>
				<artifactId>gnol_springboot_plugins_tools</artifactId>
				<version>${gnol_springboot_plugins.version}</version>
			</dependency>
			<dependency>
				<groupId>com.gnol</groupId>
				<artifactId>gnol_springboot_plugins_net</artifactId>
				<version>${gnol_springboot_plugins.version}</version>
			</dependency>
			<!-- gnol 项目封装的 spring-boot 关于 fastDFS starter -->
			<dependency>
				<groupId>com.gnol</groupId>
				<artifactId>spring-boot-starter-fastDFS</artifactId>
				<version>${gnol_springboot_plugins.version}</version>
			</dependency>
			<!-- gnol 项目封装的 spring-boot 关于 jwt starter -->
			<dependency>
				<groupId>com.gnol</groupId>
				<artifactId>spring-boot-starter-jwt</artifactId>
				<version>${gnol_springboot_plugins.version}</version>
			</dependency>
			<!-- gnol 项目封装的 spring-boot 关于 redis starter -->
			<dependency>
				<groupId>com.gnol</groupId>
				<artifactId>spring-boot-starter-redis</artifactId>
				<version>${gnol_springboot_plugins.version}</version>
			</dependency>
			<!-- gnol 项目封装的 spring-boot 关于 activemq starter -->
			<dependency>
				<groupId>com.gnol</groupId>
				<artifactId>spring-boot-starter-activemq</artifactId>
				<version>${gnol_springboot_plugins.version}</version>
			</dependency>
			<!-- gnol 项目封装的 spring-boot 关于 mybatis 持久化层 starter -->
			<dependency>
				<groupId>com.gnol</groupId>
				<artifactId>spring-boot-starter-mybatis</artifactId>
				<version>${gnol_springboot_plugins.version}</version>
			</dependency>
            <!-- gnol springboot 版插件工程 =======>end -->
            <!-- swagger 生成接口文档 =======>start -->
			<dependency>
				<groupId>io.springfox</groupId>
				<artifactId>springfox-swagger2</artifactId>
				<version>${swagger.version}</version>
			</dependency>
			<dependency>
				<groupId>io.springfox</groupId>
				<artifactId>springfox-swagger-ui</artifactId>
				<version>${swagger.version}</version>
			</dependency>
            <!-- swagger 生成接口文档 =======>end -->
			<!-- admin server -->
			<dependency>
				<groupId>de.codecentric</groupId>
				<artifactId>spring-boot-admin-starter-server</artifactId>
				<version>${spring-boot-admin.version}</version>
			</dependency>
			<!-- admin client -->
			<dependency>
				<groupId>de.codecentric</groupId>
				<artifactId>spring-boot-admin-starter-client</artifactId>
				<version>${spring-boot-admin.version}</version>
			</dependency>
			<!-- zuul -->
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-netflix-zuul</artifactId>
				<version>${spring-boot-zuul.version}</version>
			</dependency>
			<!-- ehcache 相关依赖，参考 https://www.cnblogs.com/wchxj/p/8119528.html -->
			<dependency>
				<groupId>net.sf.ehcache</groupId>
				<artifactId>ehcache</artifactId>
				<version>${ehcache.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!-- @ConfigurationProperties 使用 spring-boot-configuration-processorjar 注释的项目轻松生成配置元数据文件 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>com.gnol</groupId>
			<artifactId>gnol_springboot_plugins_core</artifactId>
			<version>${gnol_springboot_plugins.version}</version>
		</dependency>
        <!-- 热部署 -->
        <!-- devtools 可以实现页面热部署（即页面修改后会立即生效，这个可以直接在 applicatjwtties 文件中配置 spring.thymeleaf.cache=false 来实现） -->
        <!-- 实现类文件、属性文件热部署（类文件修改后不会立即生效）。 即 devtools 会监听 classpath 下的文件变动，保存时会立即重启应用。
            	注意：因为其采用的虚拟机机制，该项重启是很快的 -->
        <!-- （1）base classloader （Base 类加载器）：加载不改变的 Class，例如：第三方提供的 jar 包。 -->
        <!-- （2）restart classloader（Restart 类加载器）：加载正在开发的 Class。 -->
        <!-- 为什么重启很快，因为重启的时候只是加载了正在开发的 Class，没有重新加载第三方的 jar 包。 -->
        <!-- optional=true 时依赖不会传递 -->
        <!-- 同一个项目启动多个端口进行本地开发时不能进行热部署，否则会报端口冲突。 -->
		<!-- <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
			<scope>runtime</scope>
		</dependency> -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.platform</groupId>
			<artifactId>junit-platform-launcher</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<finalName>${project.artifactId}</finalName>
		<resources>
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.xml</include>
				</includes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>**/*.*</include>
				</includes>
			</resource>
		</resources>
	</build>

    <!-- 开发者信息 -->
	<developers>
		<developer>
			<id>gnol</id>
			<name>wujialong</name>
			<email>wjl5760610@126.com</email>
			<roles>
				<role>project owner</role>
			</roles>
			<timezone>+8</timezone>
		</developer>
	</developers>

	<organization>
		<name>gnol</name>
		<url>http://gnol.com</url>
	</organization>

</project>